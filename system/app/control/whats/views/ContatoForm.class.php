<?php
/**
 * System generated by SysGen (System Generator with Formdin Framework) 
 * Download SysGenAd: https://github.com/bjverde/sysgenad
 * Download Formdin5 Framework: https://github.com/bjverde/formDin5
 * 
 * SysGen  Version: 0.6.1
 * FormDin Version: 5.0.0
 * 
 * System aw created in: 2023-08-21 14:08:51
 */

class ContatoForm extends TPage
{

    private static $formId ='form_contatoForm'; //Form ID
    private static $primaryKey ='id_contato';
    protected $form; //Registration form Adianti
    protected $frm;  //Registration component FormDin 5
    protected $adianti_target_container;
    protected $datagrid; //Listing
    protected $pageNavigation;

    // trait com onReload, onSearch, onDelete, onClear, onEdit, show
    use Adianti\Base\AdiantiStandardFormTrait;
    // trait com onReload, onSearch, onDelete...
    use Adianti\Base\AdiantiStandardListTrait;

    public function __construct($param = null)
    {
        parent::__construct();
        $this->setDatabase('whats_df'); // define the database
        $this->setActiveRecord('contato'); // define the Active Record
        $this->setDefaultOrder('id_contato', 'asc'); // define the default order
        if(!empty($param['target_container'])){
            $this->adianti_target_container = $param['target_container'];
        }

        $this->frm = new TFormDin($this,_t('Register').' contato',null,null,self::$formId);
        $frm = $this->frm;
        $frm->enableCSRFProtection(); // Protection cross-site request forgery 
        $frm->addHiddenField( self::$primaryKey );   // coluna chave da tabela
        $frm->addTextField('nome', 'Nome',50,true,50);    
        $frm->addTextField('ddi', 'DDI',4,true,5,'+55');
        $frm->addNumberField('ddd', 'DDD',2,true,0,false,'61');
        $frm->addMaskField('celular', 'Celular',true,'99999-9999',false);
        //$frm->addTextField('celular', 'Celular',50,true,50);
        //$frm->addTextField('st_whastapp', 'Status Whatsapp',50,false,50);
        //$frm->addTextField('avisado', 'Avisado',50,false,50);

        // O Adianti permite a Internacionalização - A função _t('string') serve
        //para traduzir termos no sistema. Veja ApplicationTranslator escrevendo
        //primeiro em ingles e depois traduzindo
        $frm->setAction( _t('Save'), 'onSave', null, 'fa:save', 'green' );
        $frm->setActionLink( _t('Clear'), 'onClear', null, 'fa:eraser', 'red');
        $frm->setActionLink( _t('Back'), ['ContatoFormList','onReload'], null, 'fas:arrow-left', '#000000');

        $this->form = $frm->show();
        $this->form->setData( TSession::getValue(__CLASS__.'_filter_data'));
        // creates the page structure using a table
        $formDinBreadCrumb = new TFormDinBreadCrumb(__CLASS__,false);
        $vbox = $formDinBreadCrumb->getAdiantiObj();
        $vbox->add($this->form);

        // add the table inside the page
        parent::add($vbox);
    }

    //--------------------------------------------------------------------------------
    /**
     * Close right panel
     */
     /*
    public function onClose()
    {
        TScript::create("Template.closeRightPanel()");
    } //END onClose
     */

    //--------------------------------------------------------------------------------
    public function onSave($param)
    {
        $data = $this->form->getData();
        //Função do FormDin para Debug
        //FormDinHelper::d($param,'$param');
        //FormDinHelper::debug($data,'$data');
        //FormDinHelper::debug($_REQUEST,'$_REQUEST');

        try{
            $this->form->validate();
            $this->form->setData($data);
            //Padrão FormDin 5
            /*
            $vo = new ContatoVO();
            $this->frm->setVo( $vo ,$data ,$param );
            $controller = new ContatoController();
            $resultado = $controller->save( $vo );
            if( is_int($resultado) && $resultado!=0 ) {
                //$text = TFormDinMessage::messageTransform($text); //Tranform Array in Msg Adianti
                $this->onReload();
                $this->frm->addMessage( _t('Record saved') );
                //$this->frm->clearFields();
            }else{
                $this->frm->addMessage($resultado);
            }
            */
            TTransaction::open($this->database); // open a transaction

            $messageAction = null;

            $object = new Contato(); // create an empty object 
            $data = $this->form->getData(); // get form data as array
            $object->fromArray( (array) $data); // load the object with data
            $object->store(); // save the object             
            $data->id_contato = $object->id_contato; // get the generated {PRIMARY_KEY}

            $this->form->setData($data); // fill form data
            TTransaction::close(); // close the transaction

            new TMessage(TFormDinMessage::TYPE_INFO, "Registro salvo", $messageAction); 

        }catch (Exception $e){
            new TMessage(TFormDinMessage::TYPE_ERROR, $e->getMessage());
            $this->form->setData( $this->form->getData() ); // keep form data
            TTransaction::rollback(); // undo all pending operations
        } //END TryCatch
    } //END onSave

    public function onEdit( $param )
    {
        try {
            if (isset($param['key'])) {
                $key = $param['key'];  // get the parameter $key
                TTransaction::open($this->database); // open a transaction
                $object = new Contato($key); // instantiates the Active Record 
                $this->form->setData($object); // fill the form 
                TTransaction::close(); // close the transaction 
            }else{
                $this->form->clear();
            }
        } catch (Exception $e) {
            new TMessage(TFormDinMessage::TYPE_ERROR, $e->getMessage()); // shows the exception error message
            TTransaction::rollback(); // undo all pending operations
        }
    }

}